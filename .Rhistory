plots_list <- list()
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances for", basename(model_file_name))
# Plot top 3 feature importances, catch potential errors
tryCatch({
plots_list[[length(plots_list) + 1]] <- plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
})
}
# Arrange the plots as subplots using the grid.arrange function
do.call("grid.arrange", c(plots_list, ncol = 2)) # Adjust ncol as needed depending on the total number of plots
grid.arrange(grobs = all_plots, ncol = 2, top = textGrob("Main Title", gp = gpar(fontsize = 20, font = 2)),
layout_matrix = rbind(c(1, 2)),
padding = unit(c(1, 1, 1, 1), "lines")) # Adjust the padding values as needed
grid.arrange(grobs = plots_list, ncol = 2, top = textGrob("Main Title", gp = gpar(fontsize = 20, font = 2)),
layout_matrix = rbind(c(1, 2)),
padding = unit(c(1, 1, 1, 1), "lines")) # Adjust the padding values as needed
library(caret)
library(ggplot2)
library(gridExtra)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot (do not print!)
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
return(importance_plot)
}
# Initialize a list to store plots
all_plots <- list()
plot_index <- 1
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances for", basename(model_file_name))
# Generate and store the plot, catch potential errors
tryCatch({
all_plots[[plot_index]] <- plot_feature_importance(model, title)
plot_index <- plot_index + 1
},
error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
}
)
}
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 2)) # Adjust ncol for the desired number of columns
grid.arrange(grobs = all_plots, ncol = 2, top = textGrob("Main Title", gp = gpar(fontsize = 20, font = 2)),
layout_matrix = rbind(c(1, 2)),
padding = unit(c(1, 1, 1, 1), "lines")) # Adjust the padding values as needed
# Use 'grid.arrange' to plot with additional padding between the plots
grid.arrange(grobs = all_plots, ncol = 2, top = textGrob("Main Title", gp = gpar(fontsize = 20, font = 2)),
layout_matrix = rbind(c(1, 2)),
padding = unit(c(1, 1, 1, 1), "lines")) # Adjust the padding values as needed
# Use 'grid.arrange' to plot with additional padding between the plots
grid.arrange(grobs = all_plots, ncol = 2,
layout_matrix = rbind(c(1, 2)),
padding = unit(c(1, 1, 1, 1), "lines")) # Adjust the padding values as needed
# Arrange all stored plots together with padding
do.call(grid.arrange, c(all_plots, ncol = 2, # Adjust ncol as necessary
# Specify padding and margins as you prefer
bottom = unit(1, "cm"), # Adjust space at the bottom of plots
top = unit(1, "cm"),    # Adjust space at the top of plots
left = unit(1, "cm"),   # Adjust space on the left side of plots
right = unit(1, "cm"),  # Adjust space on the right side of plots
padding = unit(1, "cm") # Padding between plots
))
# Arrange all stored plots together with different horizontal and vertical padding
do.call(grid.arrange, c(all_plots, ncol = 2, # Adjust ncol as necessary
layout_matrix = rbind(c(1, 2),
c(3, 4)), # Define layout if needed
padding = unit(c(1, 1), "lines"), # Horizontal and vertical padding
vp = viewport(layout = grid.layout(nrow = 2, ncol = 2,
widths = unit(c(1, 1), "null"),
heights = unit(c(1, 1), "null")))
))
# Assuming that all the plot objects are stored in the all_plots list
# Arrange all stored plots together with padding
do.call(grid.arrange, c(all_plots, ncol = 2, # Adjust ncol as necessary
# Specify padding and margins as you prefer
bottom = unit(1, "cm"), # Adjust space at the bottom of plots
top = unit(1, "cm"),    # Adjust space at the top of plots
left = unit(1, "cm"),   # Adjust space on the left side of plots
right = unit(1, "cm"),  # Adjust space on the right side of plots
padding = unit(3, "cm") # Padding between plots
))
library(caret)
library(ggplot2)
library(dplyr) # For data manipulation
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Initialize an empty data frame to store top feature importance across models
top_feature_importances <- data.frame(Feature = character(), Frequency = integer())
# Function to extract and plot feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Collect top 3 feature names
top_features <- head(importance[order(-importance$Importance), 'Feature'], 3)
top_feature_importances <<- rbind(top_feature_importances, data.frame(Feature = top_features, Frequency = 1))
# Create a feature importance plot
importance_plot <- ggplot(importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
# Print the plot
print(importance_plot)
}
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Feature Importances for", basename(model_file_name))
# Plot feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
})
}
# Summarize the frequency of top features across all models
top_feature_importances_summarized <- top_feature_importances %>%
group_by(Feature) %>%
summarize(Frequency = sum(Frequency))
# Plot the distribution of top features appearance across models
ggplot(top_feature_importances_summarized, aes(x = reorder(Feature, Frequency), y = Frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
xlab("Features") +
ylab("Frequency of Top 3 Importance") +
ggtitle("Distribution of Top 3 Feature Importances Across Models") +
coord_flip() # Flip coordinates for horizontal bars
library(caret)
library(ggplot2)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
# Print the plot
print(importance_plot)
}
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances for", basename(model_file_name))
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
})
}
library(caret)
library(ggplot2)
library(gridExtra)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot (do not print!)
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
return(importance_plot)
}
# Initialize a list to store plots
all_plots <- list()
plot_index <- 1
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances for", basename(model_file_name))
# Generate and store the plot, catch potential errors
tryCatch({
all_plots[[plot_index]] <- plot_feature_importance(model, title)
plot_index <- plot_index + 1
},
error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
}
)
}
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 2)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 10)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 8)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 6)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol = 12)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots)) # Adjust ncol for the desired number of columns
library(caret)
library(ggplot2)
library(gridExtra)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot (do not print!)
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
return(importance_plot)
}
# Initialize a list to store plots
all_plots <- list()
plot_index <- 1
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Feature Importances")
# Generate and store the plot, catch potential errors
tryCatch({
all_plots[[plot_index]] <- plot_feature_importance(model, title)
plot_index <- plot_index + 1
},
error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
}
)
}
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots)) # Adjust ncol for the desired number of columns
library(caret)
library(ggplot2)
library(gridExtra)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot (do not print!)
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
return(importance_plot)
}
# Initialize a list to store plots
all_plots <- list()
plot_index <- 1
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("")
# Generate and store the plot, catch potential errors
tryCatch({
all_plots[[plot_index]] <- plot_feature_importance(model, title)
plot_index <- plot_index + 1
},
error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
}
)
}
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol=5)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol=2)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots, ncol=5)) # Adjust ncol for the desired number of columns
# Arrange all stored plots together
do.call(grid.arrange, c(all_plots)) # Adjust ncol for the desired number of columns
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances")
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances r", model_file_name, ":", e$message, "\n")
})
}
setwd("trained_models")
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances")
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances r", model_file_name, ":", e$message, "\n")
})
}
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances")
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances r", model_file_name, ":", e$message, "\n")
})
}
library(caret)
library(ggplot2)
library(gridExtra)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot (do not print!)
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
return(importance_plot)
}
# Initialize a list to store plots
all_plots <- list()
plot_index <- 1
# Loop through each model file and store the plots in the list
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("")
# Generate and store the plot, catch potential errors
tryCatch({
all_plots[[plot_index]] <- plot_feature_importance(model, title)
plot_index <- plot_index + 1
},
error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
}
)
}
# Arrange all stored plots together
#do.call(grid.arrange, c(all_plots)) # Adjust ncol for the desired number of columns
all_plots
library(caret)
library(ggplot2)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
# Print the plot
print(importance_plot)
}
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances for", basename(model_file_name))
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
})
}
library(caret)
library(ggplot2)
setwd("trained_models")
# List all files in the directory with "testing" in their name and .rds extension
model_files <- list.files(pattern = "testing.*\\.RData$", full.names = TRUE)
# Function to extract and plot top 3 feature importance from a model
plot_feature_importance <- function(model, title) {
# Extract feature importance
importance <- varImp(model, scale = FALSE)$importance
# Convert row names into a column, since row names contain the variable names
importance <- data.frame(Feature = rownames(importance), Importance = importance[, 1], row.names = NULL)
# Sort by importance and select the top 3
top_importance <- head(importance[order(-importance$Importance),], 3)
# Create a feature importance plot
importance_plot <- ggplot(top_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Features") +
ylab("Importance") +
ggtitle(title) +
coord_flip() # Flip coordinates for horizontal bars
# Print the plot
print(importance_plot)
}
# Loop through each model file
for (model_file_name in model_files) {
# Load the model
model <- readRDS(model_file_name)
# Generate a plot title based on the model file name
title <- paste("Top 3 Feature Importances")
# Plot top 3 feature importances, catch potential errors
tryCatch({
plot_feature_importance(model, title)
}, error = function(e) {
cat("Error in plotting feature importances for", model_file_name, ":", e$message, "\n")
})
}
model_files
